Stack Implementation Using Linked List in C++

1. Introduction

This document describes a C++ program for implementing a stack data structure using a linked list. A stack is a linear data structure that operates on the Last-In-First-Out (LIFO) principle, where the last element added is the first to be removed. This implementation demonstrates the fundamental operations of a stack: push, pop, and peek, as well as checking if the stack is empty.
3. Detailed Explanation

3.1. Node Class
The Node class represents each element in the stack. It contains two members:

data: an integer to hold the value of the node.
next: a pointer to the next node in the stack.
The constructor Node(int data) initializes these members, setting next to nullptr.

3.2. stack Class
The stack class handles the stack operations and maintains the top element and the size of the stack. It has private members:

size: an integer to track the number of elements in the stack.
top: a pointer to the top node of the stack.
3.2.1. Constructor stack()
The constructor initializes the stack with top set to nullptr and size set to 0.

3.2.2. Method push(int data)
This method adds an element to the top of the stack:

A new node is created with the given data.
The new node's next pointer is set to the current top.
top is updated to the new node.
The size is incremented by 1.
3.2.3. Method pop()
This method removes and returns the element from the top of the stack:

If the stack is empty (isEmpty() returns true), it returns -1.
Otherwise, it stores the top node in poppednode, updates top to the next node, retrieves the data from poppednode, deletes poppednode, decrements size by 1, and returns the data.
3.2.4. Method isEmpty()
This method checks if the stack is empty by returning true if size is 0.

3.2.5. Method peek()
This method returns the data of the top node without removing it from the stack.

3.2.6. Destructor ~stack()
The destructor deletes all the nodes in the stack to free up memory. It iterates through the stack, deleting each node one by one.

3.3. main() Function
The main() function provides a simple text-based interface to interact with the stack:

It creates a stack object mystack.
It then enters a loop that allows the user to perform operations on the stack (push, pop, and peek) until the user chooses to exit.
Each option calls the corresponding method in the stack class and prints the result.